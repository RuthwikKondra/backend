pipeline {
    agent {
        label 'Agent-1'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    environment {
        nexusUrl = '107.21.66.31:8081' // Nexus server URL
    }

    stages {
        stage('Read the Version') {
            steps {
                script {
                    // Read version dynamically from package.json
                    def packageJson = readJSON file: 'package.json'
                    APP_VERSION = packageJson.version // Use local Groovy variable for dynamic assignment
                    echo "Application version: ${APP_VERSION}" // Log the version
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh """
                    npm install
                    ls -ltr
                    echo "Application version: ${APP_VERSION}" // Use Groovy variable
                """
            }
        }

        stage('Build') {
            steps {
                script {
                    // Use APP_VERSION set earlier to build zip file
                    sh """
                        zip -q -r backend-${APP_VERSION}.zip * -x jenkinsfile -x backend-${APP_VERSION}.zip
                        ls -ltr
                    """
                }
            }
        }

        stage('Nexus Artifact Upload') {
            steps {
                script {
                    // Ensure version and Nexus connection are used correctly
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: "${env.nexusUrl}", // Fixed reference to env variable
                        groupId: 'com.expense',
                        version: "${APP_VERSION}",  // Fixed version reference from Groovy variable
                        repository: "backend",
                        credentialsId: 'nexus-auth', // Verify Jenkins credentials
                        artifacts: [
                            [
                                artifactId: "backend",
                                classifier: '',
                                file: "backend-${APP_VERSION}.zip", // Correct artifact name
                                type: 'zip'
                            ]
                        ]
                    )
                }
            }
        }
    }

    post { 
        always { 
            echo 'Cleaning up workspace...'
            deleteDir() // Cleanup
        }
        success { 
            echo 'Pipeline completed successfully!'
        }
        failure { 
            echo 'Pipeline failed!'
        }
    }
}

pipeline {
    agent {
        label 'Agent-1'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    parameters {
        choice(name: 'action', choices: ['Apply', 'Destroy'], description: 'Pick something')
    }

    enviornment {
        def appversion = ''
    }
    stages
    {
        stage('read the version'){
            steps{
                script
                {
                    def packageJson =readJson file: 'package.json'
                    def appVersion = packageJson.version
                    echo "application version: $appversion"
                }
            }
        }
    }
    stages {
        stage('Install Dependencies') {
            steps {
               sh """
                npm install
                ls -ltr
                echo "application version: $appversion"
               """
            }
        }
        stage('Build'){
            steps{
                sh """
                zip -r backend-${appVersion}.zip * -x jenkinsfile -x backend-${appVersion}.zip
                ls -ltr
                """
            }
        }
    }

    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        success { 
            echo 'I will run when pipeline is success'
        }
        failure { 
            echo 'I will run when pipeline is failure'
        }
    }
}